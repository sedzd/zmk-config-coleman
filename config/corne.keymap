/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

// Layers

#define L1 0
#define L2 1
#define Fn 2

// Meh key

#define MEH LS(LC(LALT))
#define CLT LC(LALT)

// Behaviors Constants

#define TAPPING_TERM_MS 280
#define QUICK_TAP_MS 175
#define GLOBAL_QUICK_TAP_MS 150

// Combos Constants

#define COMBO_TERM_DEFAULT 30
#define COMBO_QUICK_TAP_MS 100

/*************
 * BEHAVIORS *
 *************/

&mt {
    flavor = "balanced";
    tapping-term-ms = <TAPPING_TERM_MS>;
    quick-tap-ms = <QUICK_TAP_MS>;
    require-prior-idle-ms = <GLOBAL_QUICK_TAP_MS>;
};

&lt {
    flavor = "balanced";
    tapping-term-ms = <TAPPING_TERM_MS>;
    quick-tap-ms = <QUICK_TAP_MS>;
    require-prior-idle-ms = <GLOBAL_QUICK_TAP_MS>;
};

&sk {
    quick-release;
};

// Adds arrows and shift to smart layer for more comfortable navigation/selection moves

&num_word {
    layers = <L2>;
    continue-list = <BSPC DEL DOT COMMA PLUS MINUS STAR FSLH EQUAL RSHFT LEFT RIGHT UP DOWN>;
};

/ {
    behaviors {
        /*
     - tap: sticky shift
     - double-tap: caps-word (shift + tap mod-morph)
     - hold: shift

     From: https://github.com/urob/zmk-config/
     */

        /omit-if-no-ref/

        smart_shift: smart_shift {
            label = "SMART_SHIFT";
            compatible = "zmk,behavior-mod-morph";
            bindings = <&sk RSHFT>, <&caps_word>;

            mods = <(MOD_RSFT)>;
            #binding-cells = <0>;
        };

        /*
     - tap: num-word
     - hold: &mo layer

     From: https://github.com/urob/zmk-config/
     */

        /omit-if-no-ref/

        smart_num: smart_num {
            label = "SMART_NUM";
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";
            tapping-term-ms = <TAPPING_TERM_MS>;
            bindings = <&mo>, <&num_dance>;

            #binding-cells = <2>;
        };

        /*
     - tap: &sl L2
     - tap x 2: &num_word

     From: https://github.com/urob/zmk-config/
     */

        /omit-if-no-ref/

        num_dance: num_dance {
            label = "NUM_DANCE";
            compatible = "zmk,behavior-tap-dance";
            tapping-term-ms = <TAPPING_TERM_MS>;
            bindings = <&sl L2>, <&num_word>;

            #binding-cells = <0>;
        };

        /*
     - tap: &kp <PARAM_2>
     - hold: &none

     Example: &nh 0 K_CANCEL
     */

        /omit-if-no-ref/

        nh: no_hold {
            label = "NO_HOLD";
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";
            tapping-term-ms = <TAPPING_TERM_MS>;
            bindings = <&none>, <&kp>;

            #binding-cells = <2>;
        };

        /*
     - tap: sticky ctrl
     - hold: ctrl
     - double-tap: sticky meh (ctrl + tap mod-morph)
     - tap + hold: meh (ctrl + hold mod-morph)

     From: https://github.com/urob/zmk-config/
     */

        /omit-if-no-ref/

        ctrl_meh: ctrl_meh {
            label = "CTRL_MEH";
            compatible = "zmk,behavior-mod-morph";
            bindings = <&sk LCTRL>, <&sk MEH>;

            mods = <(MOD_LCTL)>;
            #binding-cells = <0>;
        };

        /*
     - tap: backspace
     - hold: repeat backspace
     - shift + tap: delete
     - shift + hold: repeat delete

     From: https://zmk.dev/docs/behaviors/mod-morph#advanced-configuration
     */

        /omit-if-no-ref/

        bkspc_del: backspace_delete {
            label = "BACKSPACE_DELETE";
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            #binding-cells = <0>;
        };

        /*
     - tap: brightness up
     - hold: repeat brightness up
     - shift + tap: brightness down
     - shift + hold: repeat brightness down
     */

        /omit-if-no-ref/

        brightness: brightness {
            label = "BRIGHTNESS";
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp C_BRI_UP>, <&kp C_BRI_DN>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            #binding-cells = <0>;
        };

        /*
     - tap: next track
     - shift + tap: prev track
     */

        /omit-if-no-ref/

        next_prev: next_prev {
            label = "NEXT_PREV_TRACK";
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp C_NEXT>, <&kp C_PREV>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            #binding-cells = <0>;
        };

        /*
     - tap: volume up
     - shift + tap: volume down
     */

        /omit-if-no-ref/

        volume: volume {
            label = "VOLUME";
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp C_VOL_UP>, <&kp C_VOL_DN>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            #binding-cells = <0>;
        };

       /*
     - tap: command + K
     - then: Z
     */

        /omit-if-no-ref/

            zen: zen {
            label = "ZM_zen";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&kp LGUI &kp K>
                , <&kp NONE>
                , <&kp Z>
                ;
        };
    };
};

/**********
 * MACROS *
 **********/

/ {
    macros {
        /*
      Temporarily switches to a layer (&mo) while a modifier is held. This is
      an implementation of QMK's `LM()` using ZMK's parameterized macros.

      Params:
        1. Layer to switch to
        2. Modifier to press while layer is active

      Example:
        `&lm L1 LSHIFT`
     */

        /omit-if-no-ref/

        lm: lm {
            label = "Layer Mod";
            wait-ms = <0>;
            tap-ms = <0>;
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_param_1to1>,
                <&macro_press>,
                <&mo MACRO_PLACEHOLDER &macro_param_2to1>,
                <&macro_press>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_2to1>,
                <&macro_release>,
                <&kp MACRO_PLACEHOLDER &macro_param_1to1>,
                <&macro_release>,
                <&mo MACRO_PLACEHOLDER>;
        };

        /*
      Practically identical to &sl, except it triggers a `K_CANCEL` right before to clear
      any active smart layers. This prevents nested/stacked layer activation when needed.

      Params:
        1. Layer to switch to

      Example:
        `&csl L1`
     */

        /omit-if-no-ref/

        csl: clear_sl {
            label = "Clear + Sticky Layer";
            wait-ms = <0>;
            tap-ms = <0>;
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_tap>,
                <&kp K_CANCEL &macro_param_1to1>,
                <&macro_press>,
                <&sl MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_1to1>,
                <&macro_release>,
                <&sl MACRO_PLACEHOLDER>;
        };

        /*
      Practically identical to &mo, except it triggers a `K_CANCEL` right before to clear
      any active smart layers. This prevents nested/stacked layer activation when needed.
      It's also useful to maintain more consistent expectations when holding a cancel/exit layer
      key from a smart layer.

      Params:
        1. Layer to switch to

      Example:
        `&cmo L1`
     */

        /omit-if-no-ref/

        cmo: clear_mo {
            label = "Clear + Momentary Layer";
            wait-ms = <0>;
            tap-ms = <0>;
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_tap>,
                <&kp K_CANCEL &macro_param_1to1>,
                <&macro_press>,
                <&mo MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_1to1>,
                <&macro_release>,
                <&mo MACRO_PLACEHOLDER>;
        };
    };
};

/**********
 * KEYMAP *
 **********/

/ {
    combos {
        compatible = "zmk,combos";

        excl {
            bindings = <&kp EXCLAMATION>;
            key-positions = <2 14>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
            slow-release;
            layers = <0 1>;
        };

        at {
            bindings = <&kp AT_SIGN>;
            key-positions = <3 15>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
            slow-release;
            layers = <0 1>;
        };

        hash {
            bindings = <&kp HASH>;
            key-positions = <4 16>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
            slow-release;
            layers = <0 1>;
        };

        dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <5 17>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
            slow-release;
            layers = <0 1>;
        };

        caret {
            bindings = <&kp CARET>;
            key-positions = <14 26>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
            slow-release;
            layers = <0 1>;
        };

        ampersand {
            bindings = <&kp AMPERSAND>;
            key-positions = <15 27>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
            slow-release;
            layers = <0 1>;
        };

        star {
            bindings = <&kp STAR>;
            key-positions = <16 28>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
            slow-release;
            layers = <0 1>;
        };

        lpar {
            bindings = <&kp LPAR>;
            key-positions = <17 29>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
            slow-release;
            layers = <0 1>;
        };

        percent {
            bindings = <&kp PERCENT>;
            key-positions = <6 18>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
            slow-release;
            layers = <0 1>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <7 19>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
            slow-release;
            layers = <0 1>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <8 20>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
            slow-release;
            layers = <0 1>;
        };

        semicolon {
            bindings = <&kp SEMICOLON>;
            key-positions = <9 21>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
            slow-release;
            layers = <0 1>;
        };

        rpar {
            bindings = <&kp RPAR>;
            key-positions = <18 30>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
            slow-release;
            layers = <0 1>;
        };

        lbkt {
            bindings = <&kp LBKT>;
            key-positions = <19 31>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
            slow-release;
            layers = <0 1>;
        };

        rbkt {
            bindings = <&kp RBKT>;
            key-positions = <20 32>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
            slow-release;
            layers = <0 1>;
        };

        backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <21 33>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
            slow-release;
            layers = <0 1>;
        };

        bt_clear {
            bindings = <&bt BT_CLR>;
            key-positions = <2 3 4>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
            slow-release;
            layers = <2>;
        };

        bt_sel_0 {
            bindings = <&bt BT_SEL 0>;
            key-positions = <1 13>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
            slow-release;
            layers = <2>;
        };

        bt_sel_1 {
            bindings = <&bt BT_SEL 1>;
            key-positions = <14 2>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
            slow-release;
            layers = <2>;
        };

        bt_sel_2 {
            bindings = <&bt BT_SEL 2>;
            key-positions = <3 15>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
            slow-release;
            layers = <2>;
        };

        bt_sel_3 {
            bindings = <&bt BT_SEL 3>;
            key-positions = <4 16>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
            slow-release;
            layers = <2>;
        };

        bt_sel_4 {
            bindings = <&bt BT_SEL 4>;
            key-positions = <5 17>;
            timeout-ms = <30>;
            require-prior-idle-ms = <100>;
            slow-release;
            layers = <2>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        L1 {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESCAPE  &kp Q      &kp W        &kp E       &kp R           &kp T              &kp Y         &kp U            &kp I           &kp O          &kp P         &kp K_CANCEL
&bkspc_del  &kp A      &kp S        &kp D       &kp F           &kp G              &kp H         &kp J            &kp K           &kp L          &kp SEMI      &kp ENTER
&csl 2      &mt MEH Z  &mt LCTRL X  &mt LALT C  &mt LEFT_GUI V  &mt CLT B          &mt CLT N     &mt RIGHT_GUI M  &mt RALT COMMA  &mt RCTRL DOT  &mt MEH FSLH  &csl 2
                                    &kp TAB     &smart_num 1 0  &mt LSHFT SPACE    &smart_shift  &smart_num 1 0   &kp GRAVE
            >;

            label = "L1";
        };

        L2 {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp C_BRI_DEC  &kp C_BRI_UP  &kp UP    &kp C_PLAY_PAUSE  &kp C_NEXT    &kp C_VOL_UP    &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp HOME             &trans
&trans  &trans         &kp LEFT      &kp DOWN  &kp RIGHT         &kp C_PREV    &kp C_VOL_DN    &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp END              &trans
&trans  &sk MEH        &sk LCTRL     &sk LALT  &sk LGUI          &sk CLT       &mt CLT K_MUTE  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &mt MEH KP_NUMBER_0  &trans
                                     &trans    &cmo 1            &trans        &trans          &cmo 1           &trans
            >;

            label = "L2";
        };

        Fn {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&out OUT_TOG  &kp F1   &kp F2   &kp F3  &kp F4  &kp F5         &trans       &trans  &trans    &trans  &trans  &kp C_POWER
&sys_reset    &kp F6   &kp F7   &kp F8  &kp F9  &kp F10        &trans       &trans  &trans    &trans  &trans  &sys_reset
&cmo 2        &kp F11  &kp F12  &trans  &trans  &bootloader    &bootloader  &trans  &trans    &trans  &trans  &cmo 2
                                &trans  &cmo 1  &trans         &trans       &cmo 1  &kp CLCK
            >;

            label = "Fn";
        };
    };
};
